[tool.poetry]
name = "rasterra"
version = "0.5.8"
description = "A sleek, object-oriented interface designed for intuitive raster data manipulation in Python."
authors = [
    "James Collins <collijk1@gmail.com>",
]
license = "BSD-3-Clause"
readme = "README.md"

documentation = "https://collijk.github.io/rasterra"
homepage = "https://collijk.github.io/rasterra"
repository = "https://github.com/collijk/rasterra"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "rasterra", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.10, <3.13"
pyproj = "^3.6.0"
numpy = "^1.26.0"
affine = "^2.4.0"
shapely = "^2.0.1"
click = "*"
rasterio = "^1.3.9"
matplotlib = "^3.8.1"
geopandas = "^0.14.1"

[tool.poetry.group.dev.dependencies]
mkdocstrings = {version = ">=0.23", extras = ["python"]}
mkdocs = "*"
mkdocs-material = "*"
mkdocs-table-reader-plugin = "*"
mypy = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
ruff = ">=0.2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project.scripts]
my-cli = "rasterra.cli:main"

[tool.ruff]
target-version = "py310" # The lowest supported version

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "COM812",   # flake8 missing trailing comma, fomatter handles
    "ISC001",   # Implicit string concatenation is not allowed
    "ANN",      # Type hints related, let mypy handle these.
    "D",        # Docstrings related, way too strict to our taste
    "RET505",   # Else after return, too many false positives.
    "UP038",    # Union types in isinstace/issubclass checks; not fully supported
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 9

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.pytest.ini_options]
addopts = """\
    --cov rasterra \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 1
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
disallow_any_unimported = false
plugins = [
    "numpy.typing.mypy_plugin"
]

[[tool.mypy.overrides]]
module = [
    "affine",
    "rasterio.*",
    "shapely.*",
    "mpl_toolkits.*",
    "geopandas.*",
]
ignore_missing_imports = true

# [[tool.mypy.overrides]]
# module = [
#   "tests/my_thing/test_my_thing",
# ]
# disallow_untyped_defs = false
